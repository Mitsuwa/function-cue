#!/usr/bin/env python3

import glob
import json
import os
import re
import subprocess

VERSION_PATTERN = re.compile("^v[0-9.]+$")

def process_versions(org, repo, versions):
    processed = []
    for version in versions:
        url = f"github.com/{org}/{repo}@{version}"
        go_get_detail(url)

        cue_get_details(org, repo, version)

        version_cue_data(org, repo, version, processed)

        processed.append(version)

def go_get_detail(url):
    print()
    print("********************")
    print("Go dependencies")
    print("********************")
    print()

    subprocess.check_output(["go", "get", url])

def cue_get_details(org, repo, version):
    gopath = os.getenv("GOPATH")
    prefix = os.path.join(gopath, "pkg", "mod")
    path = f"{prefix}/github.com/{org}/{repo}@{version}/apis"

    print()
    print("********************")
    print(f"Walking {path}")
    print("********************")
    print()

    for root, dirs, files in os.walk(path, topdown=False):
        for name in dirs:
            dir_path = os.path.join(root, name)
            # Only look for dirs containing go files
            if len(glob.glob(f"{dir_path}/*.go")) != 0:
                # remove the {gopath}/pkg/mod
                # and the @{version} in the dir name
                url = dir_path.removeprefix(f"{prefix}/").replace(f"@{version}", "")
                subprocess.check_output(["cue", "get", "go", url])
                print(f"cue get go {url}")

def dir_processed(dir_path, processed):
    paths = os.path.split(dir_path)

    # if the last part of the path is not a version, skip it
    if not VERSION_PATTERN.match(paths[-1]):
        return False

    return paths[-1] in processed

def version_cue_data(org, repo, version, processed):
    print()
    print("********************")
    print(f"Versioning cue data: {version}")
    print("********************")
    print()

    for root, dirs, files in os.walk(f"cue.mod/gen/github.com/{org}/{repo}", topdown=False):
        for name in dirs:
            dir_path = os.path.join(root, name)

            # Skip dirs we've already processed
            if dir_processed(dir_path, processed):
                continue

            # only look for dirs containing cue files
            cue_files = glob.glob(f"{dir_path}/*.cue")
            if len(cue_files) != 0:
                os.mkdir(os.path.join(dir_path, version))

            for f in cue_files:
                basename = os.path.basename(f)
                versioned_file = os.path.join(dir_path, version, basename)
                os.rename(f, versioned_file)
                print(f"{f} -> {versioned_file}")

def main():
    print("Generating cue.mod")
    print("...")

    with open("providers.json", "r") as f:
        providers = json.loads(f.read())

        for org, details in providers["orgs"].items():
            for repo, versions in details.items():
                process_versions(org, repo, versions)


    print("Moving cue.mod to output dir")
    os.rename("cue.mod", "./out/cue.mod")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3

import glob
import json
import os
import subprocess

def go_get_details(org, repo, versions):
    for version in versions:
        url = f"github.com/{org}/{repo}@{version}"
        subprocess.check_output(["go", "get", url])

def cue_get_details(org, repo, versions):
    for version in versions:
        gopath = os.getenv("GOPATH")
        path = f"{gopath}/pkg/mod/github.com/{org}/{repo}@{version}/apis"

        print("********************")
        print("Walking {path}")
        print("********************")
        print()
        for root, dirs, files in os.walk(path, topdown=False):
            for name in dirs:
                dir_path = os.path.join(root, name)
                # Only look for dirs containing go files
                if len(glob.glob(f"{dir_path}/*.go")) != 0:
                    subprocess.check_output(["cue", "get", "go", dir_path])

def version_cue_data(version):
    print("********************")
    print(f"Versioning cue data: {version}")
    print("********************")
    print()
    for root, dirs, files in os.walk("cue.mod", topdown=False):
        for name in dirs:
            dir_path = os.path.join(root, name)
            # only look for dirs containing cue files

            cue_files = glob.glob(f"{dir_path}/*.cue")
            if len(cue_files) != 0:
                os.mkdir(os.path.join(dir_path, version))

            for f in cue_files:
                basename = os.path.basename(f)
                versioned_file = os.path.join(dir_path, version, basename)
                os.rename(f, versioned_file)
                print("{f} -> {verioned_file}")

def main():
    with open("providers.json", "r") as f:
        providers = json.loads(f.read())

        for org, details in providers["orgs"].items():
            for repo, versions in details.items():
                go_get_details(org, repo, versions)

                cue_get_details(org, repo, versions)


    print("Moving cue.mod to output dir")
    os.rename("cue.mod", "/out/cue.mod")

if __name__ == "__main__":
    main()
